{
	"info": {
		"_postman_id": "46e1381a-6a93-4200-98ef-b3f30602be6f",
		"name": "hillel Qauto validation sign up fields",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20657364"
	},
	"item": [
		{
			"name": "Auth validation",
			"item": [
				{
					"name": "user is not able to register entering long last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Last Name has to be from 2 to 20 characters long\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"rrrrrrrrrrrrrrrrrrrrr\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"Qwerty12345\",\r\n  \"repeatPassword\": \"Qwerty12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is not able to register entering incorrect data in last name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Last Name is invalid\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"rrrrrrrrrrr123\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"Qwerty12345\",\r\n  \"repeatPassword\": \"Qwerty12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is not able to register entering nothing in last name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Last Name is required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"rrrrrrrrrrr123\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"Qwerty12345\",\r\n  \"repeatPassword\": \"Qwerty12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is not able to register entering long first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name has to be from 2 to 20 characters long\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"rrrrrrrrrrrrrrrrrrrrr\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"Qwerty12345\",\r\n  \"repeatPassword\": \"Qwerty12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is not able to register entering incorrect data in first name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name is invalid\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}+1\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"Qwerty12345\",\r\n  \"repeatPassword\": \"Qwerty12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is not able to register entering nothing in first name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name is required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"Qwerty12345\",\r\n  \"repeatPassword\": \"Qwerty12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is not able to register with empty email field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email is required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"\",\r\n  \"password\": \"{{pas}}\",\r\n  \"repeatPassword\": \"{{pas}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is not able to register entering invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email is incorrect\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}+2\",\r\n  \"password\": \"Qwerty12345\",\r\n  \"repeatPassword\": \"Qwerty12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is not able to register entering invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Password has to be from 8 to 15 characters long and contain at least one integer, one capital, and one small letter\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"qwerty12345\",\r\n  \"repeatPassword\": \"qwerty12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is not able to register when password is not equal to repeat password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Passwords do not match\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"Qwerty62345\",\r\n  \"repeatPassword\": \"Qwerty12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is not able to register with empty password field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Password required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"\",\r\n  \"repeatPassword\": \"Qwerty12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is able to register enering valid data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"userId\", jsonData.data.userId);\r",
									"\r",
									"const schema =\r",
									"   { \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"userId\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"distanceUnits\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"currency\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"userId\",\r",
									"        \"distanceUnits\",\r",
									"        \"currency\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var data = JSON.parse(responseBody);  \r",
									"\r",
									"pm.test('Body is correct', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Vasya\",\r\n    \"lastName\": \"Pupken\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{pas}}\",\r\n    \"repeatPassword\": \"{{pas}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": [
						{
							"name": "user is able to register enering valid data Copy",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"Qwerty12345\",\r\n  \"repeatPassword\": \"Qwerty12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth/signup",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx/1.18.0 (Ubuntu)"
								},
								{
									"key": "Date",
									"value": "Sat, 02 Dec 2023 15:45:58 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "112"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "ETag",
									"value": "W/\"70-iUWXknM1E7TUVCtoE/tdvJUFq50\""
								},
								{
									"key": "Set-Cookie",
									"value": "sid=s%3AoFUhVk5Ncjua_1LHz_tWgaG6yMy-ScHO.BV3Wgy8skj4%2B0Q0Pb2qqR77VJhZCZ52F7wBvMTfHZ%2FU; Domain=.forstudy.space; Path=/; Expires=Sun, 03 Dec 2023 15:45:58 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"ok\",\n    \"data\": {\n        \"userId\": 65675,\n        \"photoFilename\": \"default-user.png\",\n        \"distanceUnits\": \"km\",\n        \"currency\": \"usd\"\n    }\n}"
						}
					]
				},
				{
					"name": "user is not able to register when password is not equal to repeat password Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Re-enter password required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{pas}}\",\r\n  \"repeatPassword\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signup",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "logout/login",
			"item": [
				{
					"name": "User is able to logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is able to login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"UserId is correct\", function () {\r",
									"  pm.expect(pm.response.json().userId).to.eql(pm.collectionVariables.get(\"{{userId}}\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{pas}}\",\r\n  \"remember\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signin",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user edit info",
			"item": [
				{
					"name": "User is able to get his/her authenticated data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is able to get his/her authenticated profile data",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is able to edit his/her authenticated profile data Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var img = pm.variables.replaceIn(\"{{$randomPeopleImage}}\")\r",
									"  pm.collectionVariables.set(\"new_image\", img);\r",
									"  var first_name = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
									"  pm.collectionVariables.set(\"new_name\", first_name );\r",
									"  var last_name = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
									"  pm.collectionVariables.set(\"new_lastName\", last_name );\r",
									" var birthd = pm.variables.replaceIn(\"{{$randomDatePast}}\")\r",
									"  pm.collectionVariables.set(\"new_birthDate\", birthd );\r",
									" var countr = pm.variables.replaceIn(\"{{$randomCountry}}\")\r",
									"  pm.collectionVariables.set(\"new_country\", countr );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response property matches collection variable\", function () {\r",
									"  pm.expect(pm.response.json().photo).to.eql(pm.collectionVariables.get(\"{{new_image}}\"));\r",
									"});\r",
									"pm.test(\"Response property matches collection variable\", function () {\r",
									"  pm.expect(pm.response.json().name).to.eql(pm.collectionVariables.get(\"{{new_name}}\"));\r",
									"});\r",
									"pm.test(\"Response property matches collection variable\", function () {\r",
									"  pm.expect(pm.response.json().lastName).to.eql(pm.collectionVariables.get(\"{{new_lastName}}\"));\r",
									"});\r",
									"pm.test(\"Response property matches collection variable\", function () {\r",
									"  pm.expect(pm.response.json().dateBirth).to.eql(pm.collectionVariables.get(\"{{new_birthDate}}\"));\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"match UTC Format\", () => {\r",
									"    pm.expect(jsonData.data.dateBirth).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/)\r",
									"})\r",
									"pm.test(\"Response property matches collection variable\", function () {\r",
									"  pm.expect(pm.response.json().country).to.eql(pm.collectionVariables.get(\"{{new_country}}\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"photo\": \"{{new_image}}\",\r\n  \"name\": \"{{new_name}}\",\r\n  \"lastName\": \"{{new_lastName}}\",\r\n  \"dateBirth\": \"{{new_birthDate}}\",\r\n  \"country\": \"{{new_country}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is able to edit his/her password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"UserId is correct\", function () {\r",
									"  pm.expect(pm.response.json().userId).to.eql(pm.collectionVariables.get(\"{{userId}}\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"oldPassword\": \"{{pas}}\",\r\n  \"password\": \"{{newpas}}\",\r\n  \"repeatPassword\": \"{{newpas}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/password",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is able to logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is able to login with new password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{newpas}}\",\r\n  \"remember\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/signin",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cars",
			"item": [
				{
					"name": "user is able to view car's brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Brands\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (const item of jsonData.data) {\r",
									"    if (item.title === \"Ford\") {\r",
									"    pm.collectionVariables.set(\"desiredId\", item.id);\r",
									"    break; \r",
									"  }\r",
									"}\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/cars/brands",
							"host": [
								"{{host}}"
							],
							"path": [
								"cars",
								"brands"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is able to view car's models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All model\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"   \r",
									"var colectionCar = jsonData.data.filter(item => item.carBrandId === pm.collectionVariables.get(\"desiredId\"));\r",
									"\r",
									"for (const item of colectionCar) {\r",
									"    if (item.title === \"Mondeo\") {\r",
									"    pm.collectionVariables.set(\"desiredIdModel\", item.id);\r",
									"    break; \r",
									"  }\r",
									"}\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/cars/models",
							"host": [
								"{{host}}"
							],
							"path": [
								"cars",
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is able to add car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"carId\", jsonData.data.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"carBrandId\": {{desiredId}},\r\n  \"carModelId\": {{desiredIdModel}},\r\n  \"mileage\": 122\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/cars",
							"host": [
								"{{host}}"
							],
							"path": [
								"cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is able to view his/her car's",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    for (const item of jsonData.data) {      \r",
									"    if (item.id === (pm.collectionVariables.get(\"carId\"))) {\r",
									"    pm.collectionVariables.set(\"milesage\", item.mileage);\r",
									"    break; \r",
									"  }\r",
									"}\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/cars",
							"host": [
								"{{host}}"
							],
							"path": [
								"cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is able to view expenses",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/expenses",
							"host": [
								"{{host}}"
							],
							"path": [
								"expenses"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is able to create an expense",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"id\", jsonData.data.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"milesage\", pm.collectionVariables.get(\"milesage\")+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"carId\": {{carId}},\r\n  \"reportedAt\": \"2023-12-09\",\r\n  \"mileage\": {{milesage}},\r\n  \"liters\": 11,\r\n  \"totalCost\": 11,\r\n  \"forceMileage\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/expenses",
							"host": [
								"{{host}}"
							],
							"path": [
								"expenses"
							]
						}
					},
					"response": []
				},
				{
					"name": "user is able to edit an expense",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"milesage\", pm.collectionVariables.get(\"milesage\")+2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"carId\": {{carId}},\r\n  \"reportedAt\": \"2023-12-09\",\r\n  \"mileage\": {{milesage}},\r\n  \"liters\": 11,\r\n  \"totalCost\": 11,\r\n  \"forceMileage\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/expenses/{{id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"expenses",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validate error message",
			"item": [
				{
					"name": "User is not able to edit his/her authenticated profile data with empty name field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var img = pm.variables.replaceIn(\"{{$randomPeopleImage}}\")\r",
									"  pm.collectionVariables.set(\"new_image\", img);\r",
									"  var first_name = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
									"  pm.collectionVariables.set(\"new_name\", first_name );\r",
									"  var last_name = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
									"  pm.collectionVariables.set(\"new_lastName\", last_name );\r",
									" var birthd = pm.variables.replaceIn(\"{{$randomDatePast}}\")\r",
									"  pm.collectionVariables.set(\"new_birthDate\", birthd );\r",
									" var countr = pm.variables.replaceIn(\"{{$randomCountry}}\")\r",
									"  pm.collectionVariables.set(\"new_country\", countr );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const schema =\r",
									"  {\"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var data = JSON.parse(responseBody);  \r",
									"\r",
									"pm.test('Body is correct', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"error message correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name is required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"photo\": \"{{new_image}}\",\r\n  \"name\": \"\",\r\n  \"lastName\": \"{{new_lastName}}\",\r\n  \"dateBirth\": \"{{new_birthDate}}\",\r\n  \"country\": \"{{new_country}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is not able to edit his/her authenticated profile data with empty lastname field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();  \r",
									"pm.test(\"expect().to.be.string\", function () {   \r",
									"    pm.expect(jsonData.status).to.be.string;\r",
									"    pm.expect(jsonData.message).to.be.string;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"error message correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Name is required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var img = pm.variables.replaceIn(\"{{$randomPeopleImage}}\")\r",
									"  pm.collectionVariables.set(\"new_image\", img);\r",
									"  var first_name = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
									"  pm.collectionVariables.set(\"new_name\", first_name );\r",
									"  var last_name = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
									"  pm.collectionVariables.set(\"new_lastName\", last_name );\r",
									" var birthd = pm.variables.replaceIn(\"{{$randomDatePast}}\")\r",
									"  pm.collectionVariables.set(\"new_birthDate\", birthd );\r",
									" var countr = pm.variables.replaceIn(\"{{$randomCountry}}\")\r",
									"  pm.collectionVariables.set(\"new_country\", countr );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"photo\": \"{{new_image}}\",\r\n  \"name\": \"{{new_name}}\",\r\n  \"lastName\": \"\",\r\n  \"dateBirth\": \"{{new_birthDate}}\",\r\n  \"country\": \"{{new_country}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "User is able to logout Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Anothorized user is not able to edit his/her  profile data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var img = pm.variables.replaceIn(\"{{$randomPeopleImage}}\")\r",
									"  pm.collectionVariables.set(\"new_image\", img);\r",
									"  var first_name = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
									"  pm.collectionVariables.set(\"new_name\", first_name );\r",
									"  var last_name = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
									"  pm.collectionVariables.set(\"new_lastName\", last_name );\r",
									" var birthd = pm.variables.replaceIn(\"{{$randomDatePast}}\")\r",
									"  pm.collectionVariables.set(\"new_birthDate\", birthd );\r",
									" var countr = pm.variables.replaceIn(\"{{$randomCountry}}\")\r",
									"  pm.collectionVariables.set(\"new_country\", countr );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"  { \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var data = JSON.parse(responseBody);  \r",
									"\r",
									"pm.test('Body is correct', function() {\r",
									"  pm.expect(tv4.validate(data, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Status is ok\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ok\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"photo\": \"{{new_image}}\",\r\n  \"name\": \"{{new_name}}\",\r\n  \"lastName\": \"{{new_lastName}}\",\r\n  \"dateBirth\": \"{{new_birthDate}}\",\r\n  \"country\": \"{{new_country}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users/profile",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User is able to delete his/her acount",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{host}}/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "pas",
			"value": "Qazwsx1234"
		},
		{
			"key": "email",
			"value": "asd123@gmail.com",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "newpas",
			"value": "Qazwsx1243",
			"type": "string"
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "carId",
			"value": ""
		},
		{
			"key": "new_image",
			"value": ""
		},
		{
			"key": "new_name",
			"value": ""
		},
		{
			"key": "new_lastName",
			"value": ""
		},
		{
			"key": "new_birthDate",
			"value": ""
		},
		{
			"key": "new_country",
			"value": ""
		},
		{
			"key": "desiredId",
			"value": ""
		},
		{
			"key": "desiredIdModel",
			"value": ""
		},
		{
			"key": "milesage",
			"value": ""
		},
		{
			"key": "expensesId",
			"value": ""
		}
	]
}